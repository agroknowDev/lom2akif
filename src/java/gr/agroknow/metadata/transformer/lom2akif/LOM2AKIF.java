/* The following code was generated by JFlex 1.4.1 on 31/10/2013 3:28 μμ */

package gr.agroknow.metadata.transformer.lom2akif;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import net.zettadata.generator.tools.LOMlreLRT;
import net.zettadata.generator.tools.Toolbox;
import net.zettadata.generator.tools.ToolboxException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 31/10/2013 3:28 μμ from the specification file
 * <tt>C:/Users/nimas/Documents/NetBeansProjects/GitRepositories/lom2akif/src/conf/lom2akif.jflex</tt>
 */
class LOM2AKIF {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int RDESCRIPTIONLANGUAGE = 26;
  public static final int TYPICALAGERANGE = 20;
  public static final int RDESCRIPTIONSTRING = 27;
  public static final int RIGHTS = 24;
  public static final int COVERAGE = 9;
  public static final int EDUCATIONAL = 16;
  public static final int LEARNINGOBJECTIVE = 33;
  public static final int TAXONPATH = 22;
  public static final int LOM = 1;
  public static final int KEYWORDSTRING = 14;
  public static final int TECHNICAL = 15;
  public static final int ROLE = 30;
  public static final int LIFECYCLE = 28;
  public static final int RELATION = 32;
  public static final int TAXON = 23;
  public static final int COVERAGELANGUAGE = 10;
  public static final int GENERAL = 2;
  public static final int COVERAGESTRING = 11;
  public static final int KEYWORD = 12;
  public static final int DESCRIPTION = 6;
  public static final int ENTITY = 31;
  public static final int TITLELANGUAGE = 4;
  public static final int TITLE = 3;
  public static final int LEARNINGRESOURCETYPE = 17;
  public static final int TITLESTRING = 5;
  public static final int RDESCRIPTION = 25;
  public static final int CLASSIFICATION = 21;
  public static final int CONTEXT = 19;
  public static final int DESCRIPTIONSTRING = 8;
  public static final int KEYWORDLANGUAGE = 13;
  public static final int CONTRIBUTE = 29;
  public static final int YYINITIAL = 0;
  public static final int DESCRIPTIONLANGUAGE = 7;
  public static final int ENDUSERROLE = 18;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\31\25\0\1\14\1\0\1\43\14\0\1\5\12\0\1\35"+
    "\1\0\1\1\1\42\1\6\2\0\1\27\1\0\1\25\1\0\1\46"+
    "\1\0\1\40\6\0\1\34\1\36\1\45\1\0\1\37\1\0\1\33"+
    "\1\47\13\0\1\13\1\32\1\17\1\15\1\10\1\24\1\7\1\22"+
    "\1\21\1\0\1\50\1\2\1\4\1\11\1\3\1\30\1\0\1\12"+
    "\1\23\1\20\1\16\1\41\1\51\1\44\1\26\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\42\0\5\1\3\2\1\1\2\2\1\1\2\2\1\1"+
    "\2\2\13\1\2\2\7\1\20\0\1\3\4\0\1\4"+
    "\4\0\1\5\4\0\1\6\34\0\1\7\124\0\1\10"+
    "\76\0\1\11\75\0\1\12\11\0\1\13\12\0\1\14"+
    "\37\0\1\15\22\0\1\16\7\0\1\17\60\0\1\20"+
    "\1\21\1\0\1\22\6\0\1\23\10\0\1\24\1\25"+
    "\3\0\1\26\3\0\1\27\3\0\1\30\7\0\1\31"+
    "\15\0\1\32\4\0\1\33\14\0\1\34\5\0\1\35"+
    "\1\0\1\36\2\0\1\37\1\0\1\40\1\0\1\41"+
    "\22\0\1\42\1\43\3\0\1\44\10\0\1\45\2\0"+
    "\1\46\1\0\1\47\21\0\1\50\3\0\1\51\52\0"+
    "\1\52\3\0\1\53\2\0\1\54\2\0\1\55\6\0"+
    "\1\56\14\0\1\57\1\0\1\60\2\0\1\61\33\0"+
    "\1\62\15\0\1\63\12\0\1\64\5\0\1\65\13\0"+
    "\1\66\1\0\1\42\6\0\1\67\12\0\1\70\11\0"+
    "\1\71\6\0\1\72\5\0\1\73\5\0\1\74\1\75"+
    "\1\76\1\77\5\0\1\100\1\0\1\101\16\0\1\102"+
    "\5\0\1\103\1\104\1\105\3\0\1\106\2\0\1\107"+
    "\2\0\1\110\20\0\1\111\7\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[885];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0594"+
    "\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0594"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0594\0\u0ec4\0\u0eee\0\u0f18"+
    "\0\u0f42\0\u0594\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u0594\0\u1014"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u0594\0\u14ac\0\u14d6\0\u1500\0\u152a"+
    "\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a"+
    "\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a"+
    "\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a"+
    "\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a"+
    "\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a"+
    "\0\u1e84\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa"+
    "\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa"+
    "\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a"+
    "\0\u0594\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370"+
    "\0\u239a\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0"+
    "\0\u24ea\0\u2514\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610"+
    "\0\u263a\0\u2664\0\u268e\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760"+
    "\0\u278a\0\u27b4\0\u27de\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0"+
    "\0\u28da\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00"+
    "\0\u2a2a\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50"+
    "\0\u2b7a\0\u2ba4\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u21a2"+
    "\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6"+
    "\0\u2df0\0\u2e1a\0\u2e44\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16"+
    "\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066"+
    "\0\u3090\0\u30ba\0\u30e4\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6"+
    "\0\u31e0\0\u320a\0\u3234\0\u325e\0\u3288\0\u32b2\0\u32dc\0\u3306"+
    "\0\u3330\0\u335a\0\u3384\0\u33ae\0\u33d8\0\u3402\0\u342c\0\u3456"+
    "\0\u3480\0\u34aa\0\u34d4\0\u34fe\0\u3528\0\u3552\0\u357c\0\u35a6"+
    "\0\u35d0\0\u35fa\0\u3624\0\u364e\0\u3678\0\u36a2\0\u36cc\0\u36f6"+
    "\0\u3720\0\u374a\0\u3774\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u0594"+
    "\0\u3846\0\u3870\0\u389a\0\u38c4\0\u38ee\0\u3918\0\u3942\0\u396c"+
    "\0\u3996\0\u39c0\0\u36a2\0\u39ea\0\u3a14\0\u3a3e\0\u3a68\0\u3a92"+
    "\0\u3abc\0\u3ae6\0\u3b10\0\u3b3a\0\u3b64\0\u3b8e\0\u3bb8\0\u3be2"+
    "\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a\0\u3cb4\0\u3cde\0\u3d08\0\u3d32"+
    "\0\u3d5c\0\u3d86\0\u3db0\0\u3dda\0\u3e04\0\u3e2e\0\u3e58\0\u3e82"+
    "\0\u3eac\0\u3ed6\0\u0594\0\u3f00\0\u3f2a\0\u3f54\0\u3f7e\0\u3fa8"+
    "\0\u3fd2\0\u3ffc\0\u4026\0\u4050\0\u407a\0\u40a4\0\u40ce\0\u40f8"+
    "\0\u4122\0\u414c\0\u4176\0\u41a0\0\u41ca\0\u3774\0\u41f4\0\u421e"+
    "\0\u4248\0\u4272\0\u429c\0\u42c6\0\u42f0\0\u36a2\0\u431a\0\u4344"+
    "\0\u436e\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u4440\0\u446a\0\u4494"+
    "\0\u44be\0\u44e8\0\u4512\0\u453c\0\u4566\0\u4590\0\u45ba\0\u45e4"+
    "\0\u460e\0\u4638\0\u4662\0\u468c\0\u46b6\0\u46e0\0\u470a\0\u4734"+
    "\0\u475e\0\u4788\0\u47b2\0\u47dc\0\u4806\0\u4830\0\u485a\0\u4884"+
    "\0\u48ae\0\u48d8\0\u4902\0\u492c\0\u4956\0\u4980\0\u49aa\0\u49d4"+
    "\0\u49fe\0\u4a28\0\u4a52\0\u4a7c\0\u4aa6\0\u4ad0\0\u36a2\0\u0594"+
    "\0\u4afa\0\u0594\0\u4b24\0\u4b4e\0\u4b78\0\u4ba2\0\u4bcc\0\u4bf6"+
    "\0\u36a2\0\u4c20\0\u4c4a\0\u4c74\0\u4c9e\0\u4cc8\0\u4cf2\0\u4d1c"+
    "\0\u4d46\0\u36a2\0\u0594\0\u4d70\0\u4d9a\0\u4dc4\0\u0594\0\u4dee"+
    "\0\u4e18\0\u4e42\0\u0594\0\u4e6c\0\u4e96\0\u4ec0\0\u0594\0\u4eea"+
    "\0\u4f14\0\u4f3e\0\u4f68\0\u4f92\0\u4fbc\0\u4fe6\0\u36a2\0\u5010"+
    "\0\u503a\0\u5064\0\u508e\0\u50b8\0\u50e2\0\u510c\0\u5136\0\u5160"+
    "\0\u518a\0\u51b4\0\u51de\0\u5208\0\u0594\0\u5232\0\u525c\0\u5286"+
    "\0\u52b0\0\u0594\0\u52da\0\u5304\0\u532e\0\u5358\0\u5382\0\u53ac"+
    "\0\u53d6\0\u5400\0\u542a\0\u5454\0\u547e\0\u54a8\0\u36a2\0\u54d2"+
    "\0\u54fc\0\u5526\0\u5550\0\u557a\0\u36a2\0\u55a4\0\u0594\0\u55ce"+
    "\0\u55f8\0\u0594\0\u5622\0\u0594\0\u564c\0\u0594\0\u5676\0\u56a0"+
    "\0\u56ca\0\u56f4\0\u571e\0\u5748\0\u5772\0\u579c\0\u57c6\0\u57f0"+
    "\0\u581a\0\u5844\0\u586e\0\u5898\0\u58c2\0\u58ec\0\u5916\0\u5940"+
    "\0\u2a2a\0\u0594\0\u596a\0\u5994\0\u59be\0\u0594\0\u59e8\0\u5a12"+
    "\0\u5a3c\0\u5a66\0\u5a90\0\u5aba\0\u5ae4\0\u5b0e\0\u36a2\0\u5b38"+
    "\0\u5b62\0\u36a2\0\u5b8c\0\u0594\0\u5bb6\0\u5be0\0\u5c0a\0\u5c34"+
    "\0\u5c5e\0\u5c88\0\u5cb2\0\u5cdc\0\u5d06\0\u5d30\0\u5d5a\0\u5d84"+
    "\0\u5dae\0\u5dd8\0\u5e02\0\u5e2c\0\u5e56\0\u0594\0\u5e80\0\u5eaa"+
    "\0\u5ed4\0\u36a2\0\u5efe\0\u5f28\0\u5f52\0\u5f7c\0\u5fa6\0\u5fd0"+
    "\0\u5ffa\0\u6024\0\u604e\0\u6078\0\u60a2\0\u60cc\0\u60f6\0\u6120"+
    "\0\u614a\0\u6174\0\u619e\0\u61c8\0\u61f2\0\u621c\0\u6246\0\u6270"+
    "\0\u629a\0\u62c4\0\u62ee\0\u6318\0\u6342\0\u636c\0\u6396\0\u63c0"+
    "\0\u63ea\0\u6414\0\u643e\0\u6468\0\u6492\0\u64bc\0\u64e6\0\u6510"+
    "\0\u653a\0\u6564\0\u658e\0\u65b8\0\u36a2\0\u65e2\0\u660c\0\u6636"+
    "\0\u0594\0\u6660\0\u668a\0\u36a2\0\u66b4\0\u66de\0\u36a2\0\u6708"+
    "\0\u6732\0\u675c\0\u6786\0\u67b0\0\u67da\0\u0594\0\u6804\0\u682e"+
    "\0\u6858\0\u6882\0\u68ac\0\u68d6\0\u6900\0\u692a\0\u6954\0\u697e"+
    "\0\u69a8\0\u69d2\0\u0594\0\u69fc\0\u36a2\0\u6a26\0\u6a50\0\u0594"+
    "\0\u6a7a\0\u6aa4\0\u6ace\0\u6af8\0\u6b22\0\u6b4c\0\u6b76\0\u6ba0"+
    "\0\u6bca\0\u6bf4\0\u6c1e\0\u6c48\0\u6c72\0\u6c9c\0\u6cc6\0\u6cf0"+
    "\0\u6d1a\0\u6d44\0\u6d6e\0\u6d98\0\u6dc2\0\u6dec\0\u6e16\0\u6e40"+
    "\0\u6e6a\0\u6e94\0\u6ebe\0\u0594\0\u6ee8\0\u6f12\0\u6f3c\0\u6f66"+
    "\0\u6f90\0\u6fba\0\u6fe4\0\u700e\0\u7038\0\u7062\0\u708c\0\u70b6"+
    "\0\u70e0\0\u0594\0\u710a\0\u7134\0\u715e\0\u7188\0\u71b2\0\u71dc"+
    "\0\u7206\0\u7230\0\u725a\0\u7284\0\u0594\0\u72ae\0\u72d8\0\u7302"+
    "\0\u732c\0\u7356\0\u36a2\0\u7380\0\u73aa\0\u73d4\0\u73fe\0\u7428"+
    "\0\u7452\0\u747c\0\u74a6\0\u74d0\0\u74fa\0\u7524\0\u47b2\0\u754e"+
    "\0\u4806\0\u7578\0\u75a2\0\u75cc\0\u75f6\0\u7620\0\u764a\0\u4b24"+
    "\0\u7674\0\u769e\0\u76c8\0\u76f2\0\u771c\0\u7746\0\u7770\0\u779a"+
    "\0\u77c4\0\u77ee\0\u36a2\0\u7818\0\u7842\0\u786c\0\u7896\0\u78c0"+
    "\0\u78ea\0\u7914\0\u793e\0\u7968\0\u5454\0\u7992\0\u79bc\0\u79e6"+
    "\0\u7a10\0\u7a3a\0\u7a64\0\u4f92\0\u7a8e\0\u7ab8\0\u7ae2\0\u7b0c"+
    "\0\u7b36\0\u5160\0\u7b60\0\u7b8a\0\u7bb4\0\u7bde\0\u7c08\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u7c32\0\u7c5c\0\u7c86\0\u7cb0\0\u7cda"+
    "\0\u0594\0\u7d04\0\u0594\0\u7d2e\0\u7d58\0\u7d82\0\u7dac\0\u7dd6"+
    "\0\u7e00\0\u7e2a\0\u7e54\0\u7e7e\0\u7ea8\0\u7ed2\0\u7efc\0\u7f26"+
    "\0\u7f50\0\u36a2\0\u7f7a\0\u7fa4\0\u7fce\0\u7ff8\0\u8022\0\u5b8c"+
    "\0\u5cb2\0\u36a2\0\u804c\0\u8076\0\u80a0\0\u604e\0\u80ca\0\u80f4"+
    "\0\u0594\0\u811e\0\u8148\0\u0594\0\u8172\0\u819c\0\u81c6\0\u81f0"+
    "\0\u821a\0\u8244\0\u826e\0\u8298\0\u82c2\0\u82ec\0\u8316\0\u8340"+
    "\0\u836a\0\u8394\0\u83be\0\u83e8\0\u811e\0\u8412\0\u843c\0\u8466"+
    "\0\u8490\0\u84ba\0\u84e4\0\u850e\0\u0594";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[885];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\43\1\44\51\43\1\45\51\43\1\46\51\43\1\47"+
    "\50\43\31\50\1\43\11\50\1\51\7\50\1\52\27\50"+
    "\1\43\20\50\1\43\1\53\50\43\31\50\1\43\11\50"+
    "\1\54\7\50\1\55\27\50\1\43\20\50\1\43\1\56"+
    "\50\43\31\50\1\43\11\50\1\57\7\50\1\60\27\50"+
    "\1\43\20\50\1\43\1\61\50\43\31\50\1\43\11\50"+
    "\1\62\7\50\1\63\27\50\1\43\20\50\1\43\1\64"+
    "\51\43\1\65\51\43\1\66\51\43\1\67\51\43\1\70"+
    "\51\43\1\71\51\43\1\72\51\43\1\73\51\43\1\74"+
    "\51\43\1\75\51\43\1\76\50\43\31\50\1\43\11\50"+
    "\1\77\7\50\1\100\27\50\1\43\20\50\1\43\1\101"+
    "\51\43\1\102\51\43\1\103\51\43\1\104\27\43\1\105"+
    "\21\43\1\106\51\43\1\107\50\43\54\0\1\110\51\0"+
    "\1\111\2\0\1\112\1\0\1\113\1\114\1\0\1\115"+
    "\4\0\1\116\1\117\33\0\1\120\2\0\1\121\7\0"+
    "\1\122\1\0\1\123\1\124\27\0\1\125\6\0\1\126"+
    "\15\0\1\127\34\0\1\130\5\0\1\131\42\0\1\132"+
    "\51\0\1\133\15\0\1\134\34\0\1\135\5\0\1\136"+
    "\42\0\1\137\51\0\1\140\15\0\1\141\34\0\1\142"+
    "\5\0\1\143\42\0\1\144\51\0\1\145\15\0\1\146"+
    "\34\0\1\147\5\0\1\150\42\0\1\151\46\0\1\152"+
    "\2\0\1\153\16\0\1\154\27\0\1\155\2\0\1\156"+
    "\11\0\1\157\1\160\1\161\35\0\1\162\33\0\1\163"+
    "\15\0\1\164\33\0\1\165\15\0\1\166\33\0\1\165"+
    "\15\0\1\167\15\0\1\170\33\0\1\171\12\0\1\172"+
    "\36\0\1\173\12\0\1\174\2\0\1\175\33\0\1\176"+
    "\13\0\1\177\35\0\1\200\7\0\1\201\41\0\1\202"+
    "\15\0\1\203\34\0\1\204\5\0\1\205\42\0\1\206"+
    "\51\0\1\207\11\0\1\210\37\0\1\211\2\0\1\212"+
    "\1\0\1\213\2\0\1\214\41\0\1\215\33\0\1\216"+
    "\15\0\1\217\100\0\1\220\1\0\1\221\20\0\1\222"+
    "\11\0\1\223\42\0\1\224\44\0\1\225\67\0\1\226"+
    "\32\0\1\227\57\0\1\230\56\0\1\231\44\0\1\232"+
    "\10\0\1\233\32\0\1\234\57\0\1\235\54\0\1\236"+
    "\45\0\1\237\52\0\1\240\44\0\1\241\67\0\1\242"+
    "\40\0\1\243\61\0\1\244\51\0\1\245\37\0\1\130"+
    "\66\0\1\246\43\0\1\247\54\0\1\250\37\0\1\135"+
    "\66\0\1\251\45\0\1\252\52\0\1\253\37\0\1\142"+
    "\66\0\1\254\76\0\1\255\21\0\1\256\37\0\1\147"+
    "\66\0\1\257\31\0\1\260\66\0\1\261\34\0\1\262"+
    "\56\0\1\263\51\0\1\264\44\0\1\265\74\0\1\266"+
    "\34\0\1\267\42\0\1\270\62\0\1\271\57\0\1\272"+
    "\43\0\1\273\55\0\1\274\52\0\1\275\51\0\1\276"+
    "\50\0\1\277\45\0\1\300\56\0\1\301\44\0\1\302"+
    "\56\0\1\303\51\0\1\304\46\0\1\305\46\0\1\306"+
    "\47\0\1\307\56\0\1\310\54\0\1\311\37\0\1\204"+
    "\66\0\1\312\30\0\1\313\52\0\1\314\65\0\1\315"+
    "\43\0\1\316\43\0\1\317\61\0\1\320\50\0\1\321"+
    "\52\0\1\322\46\0\1\323\76\0\1\324\53\0\1\325"+
    "\24\0\1\326\52\0\1\327\47\0\1\330\44\0\1\331"+
    "\71\0\1\332\30\0\1\333\57\0\1\334\56\0\1\335"+
    "\35\0\1\336\56\0\1\337\55\0\1\340\55\0\1\341"+
    "\43\0\1\342\50\0\1\343\64\0\1\344\67\0\1\345"+
    "\30\0\1\346\57\0\1\347\44\0\1\350\42\0\1\351"+
    "\57\0\1\352\41\0\1\353\53\0\1\354\57\0\1\355"+
    "\34\0\1\356\60\0\1\357\57\0\1\360\41\0\1\361"+
    "\53\0\1\362\57\0\1\363\50\0\1\364\42\0\1\365"+
    "\53\0\1\366\52\0\1\367\53\0\1\370\45\0\1\371"+
    "\70\0\1\372\41\0\1\373\41\0\1\374\43\0\1\375"+
    "\60\0\1\376\42\0\1\377\52\0\1\u0100\74\0\1\u0101"+
    "\35\0\1\u0102\41\0\1\u0103\113\0\1\u0104\20\0\1\u0105"+
    "\102\0\1\u0106\17\0\1\u0107\52\0\1\u0108\36\0\31\u0109"+
    "\1\0\20\u0109\21\0\1\u010a\53\0\1\u010b\36\0\1\u010c"+
    "\53\0\1\u010d\57\0\1\u010e\52\0\1\u010f\41\0\1\u0110"+
    "\43\0\1\u0111\66\0\1\u0112\33\0\1\u0113\67\0\1\u0114"+
    "\34\0\1\u0115\50\0\1\u0116\60\0\1\u0117\40\0\31\u0118"+
    "\1\0\20\u0118\40\0\1\u0119\21\0\1\u011a\61\0\1\u011b"+
    "\51\0\1\u011c\41\0\1\u011d\45\0\1\u011e\55\0\1\u011f"+
    "\60\0\1\u0120\45\0\1\u0121\60\0\1\u0122\52\0\1\u0123"+
    "\50\0\1\u0124\36\0\1\u0125\53\0\1\u0126\57\0\1\u0127"+
    "\42\0\1\u0128\43\0\1\u0129\120\0\1\u012a\20\0\1\u012b"+
    "\52\0\1\u012c\42\0\1\u012d\62\0\1\u012e\47\0\1\u012f"+
    "\42\0\1\u0130\100\0\1\u0131\31\0\1\u0132\42\0\1\u0133"+
    "\65\0\1\u0134\44\0\1\u0135\42\0\1\u0136\52\0\1\u0137"+
    "\55\0\1\u0138\36\0\1\u0139\57\0\1\u013a\55\0\1\u013b"+
    "\53\0\1\u013c\52\0\1\u013d\40\0\1\u013e\54\0\1\u013f"+
    "\54\0\1\u0140\53\0\1\u0141\47\0\1\u0142\44\0\1\u0143"+
    "\70\0\1\u0144\42\0\1\u0145\43\0\1\u0146\41\0\1\u0147"+
    "\112\0\1\u0148\10\0\1\u0149\67\0\1\u014a\74\0\1\u014b"+
    "\5\0\1\u0109\1\u014c\27\u0109\1\0\20\u0109\7\0\1\u014d"+
    "\61\0\1\u014e\55\0\1\u014f\47\0\1\u0150\42\0\1\u0151"+
    "\63\0\1\u0152\45\0\1\u0153\42\0\1\u0154\61\0\1\u0155"+
    "\40\0\1\u0156\51\0\1\u0157\43\0\1\u0158\65\0\1\u0159"+
    "\53\0\1\u015a\66\0\1\u015b\16\0\1\u015c\62\0\1\u015d"+
    "\50\0\1\u015e\64\0\1\u015f\32\0\1\u0160\55\0\1\u0161"+
    "\52\0\1\u0162\56\0\1\u0163\51\0\1\u0164\54\0\1\u0165"+
    "\37\0\1\u0166\56\0\1\u0167\43\0\1\u0168\53\0\1\u0169"+
    "\51\0\1\u016a\47\0\1\u016b\44\0\1\u016c\50\0\1\u016d"+
    "\60\0\1\u016e\61\0\1\u016f\47\0\1\u0170\43\0\1\u0171"+
    "\61\0\1\u0172\40\0\1\u0173\52\0\1\u0174\61\0\1\u0175"+
    "\101\0\1\u0176\11\0\1\u0177\61\0\1\u0178\50\0\1\u0179"+
    "\53\0\1\u017a\42\0\1\u017b\47\0\1\u017c\57\0\1\u017d"+
    "\42\0\1\u017e\60\0\1\u017f\43\0\1\u0180\52\0\1\u0181"+
    "\47\0\1\u0182\51\0\1\u0183\51\0\1\u0184\61\0\1\u0185"+
    "\52\0\1\u0186\41\0\1\u0187\63\0\1\u0188\37\0\1\u0189"+
    "\43\0\1\u018a\57\0\1\u018b\51\0\1\u018c\43\0\1\u018d"+
    "\46\0\1\u0109\1\u014c\3\u0109\1\u018e\23\u0109\1\0\20\u0109"+
    "\22\0\1\u018f\41\0\1\u0190\56\0\1\u0191\43\0\1\u0192"+
    "\61\0\1\u0193\40\0\1\u0194\53\0\1\u0195\57\0\1\u0196"+
    "\51\0\1\u0197\36\0\1\u0198\6\0\1\u0199\70\0\1\u019a"+
    "\26\0\1\u019b\51\0\1\u019c\62\0\1\u019d\30\0\31\u019e"+
    "\1\0\20\u019e\13\0\1\u019f\40\0\1\u01a0\75\0\1\u01a1"+
    "\51\0\1\u01a2\36\0\1\u01a3\56\0\1\u01a4\52\0\1\u01a5"+
    "\53\0\1\u01a6\47\0\1\u01a7\51\0\1\u01a8\43\0\1\u01a9"+
    "\50\0\1\u01aa\60\0\1\u01ab\43\0\1\u01ac\50\0\1\u01ad"+
    "\47\0\1\u01ae\50\0\1\u01af\53\0\1\u01b0\52\0\1\u01b1"+
    "\46\0\1\u01b2\53\0\1\u01b3\52\0\1\u01b4\46\0\1\u01b5"+
    "\53\0\1\u01b6\43\0\1\u01b7\55\0\1\u01b8\53\0\1\u01b9"+
    "\61\0\1\u01ba\41\0\1\u01bb\60\0\1\u01bc\52\0\1\u01bd"+
    "\43\0\1\u01be\102\0\1\u01bf\20\0\1\u01c0\53\0\1\u01c1"+
    "\45\0\1\u01c2\40\0\31\u01c3\1\0\20\u01c3\11\0\1\u01c4"+
    "\40\0\31\u01c5\1\0\20\u01c5\10\0\1\u01c6\60\0\1\u01c7"+
    "\41\0\1\u01c8\65\0\1\u01c9\73\0\1\u01ca\15\0\1\u01cb"+
    "\47\0\1\u01cc\53\0\1\u01cd\40\0\1\u0109\1\u014c\17\u0109"+
    "\1\u01ce\7\u0109\1\0\20\u0109\20\0\1\u01cf\52\0\1\u01d0"+
    "\42\0\1\u01d1\46\0\1\u01d2\53\0\1\u01d3\65\0\1\u01d4"+
    "\45\0\1\u01d5\42\0\1\u01d6\65\0\1\u01d7\31\0\1\u01d8"+
    "\50\0\1\u0198\65\0\1\u01d9\36\0\1\u01da\43\0\31\u01db"+
    "\1\0\20\u01db\20\0\1\u01dc\51\0\1\u01dd\34\0\1\u01de"+
    "\54\0\1\u01df\62\0\1\u01e0\34\0\1\u01e1\70\0\1\u01e2"+
    "\33\0\1\u01e3\72\0\1\u01e4\44\0\1\u01e5\41\0\1\u01e6"+
    "\55\0\1\u01e7\66\0\1\u01e8\30\0\1\u01e9\57\0\1\u01ea"+
    "\42\0\1\u01eb\57\0\1\u01ec\44\0\1\u01ed\63\0\1\u01ee"+
    "\36\0\1\u01ef\5\0\1\u01f0\44\0\1\u01f1\55\0\1\u01f2"+
    "\44\0\1\u01f3\5\0\1\u01f4\44\0\1\u01f5\54\0\1\u01f6"+
    "\45\0\1\u01f7\5\0\1\u01f8\44\0\1\u01f9\45\0\1\u01fa"+
    "\67\0\1\u01fb\30\0\31\u01fc\1\0\20\u01fc\11\0\1\u01fd"+
    "\60\0\1\u01fe\51\0\1\u01ff\33\0\1\u0200\57\0\1\u0201"+
    "\62\0\1\u0202\30\0\1\u01c3\1\u0203\27\u01c3\1\0\20\u01c3"+
    "\15\0\1\u0204\34\0\1\u01c5\1\u0205\27\u01c5\1\0\20\u01c5"+
    "\44\0\1\u0206\20\0\1\u0207\36\0\31\u0208\1\0\20\u0208"+
    "\21\0\1\u0209\43\0\1\u020a\103\0\1\u020b\20\0\1\u020c"+
    "\43\0\1\u020d\43\0\1\u0109\1\u014c\13\u0109\1\u020e\13\u0109"+
    "\1\0\20\u0109\23\0\1\u020f\56\0\1\u0210\42\0\1\u0211"+
    "\36\0\1\u0212\5\0\1\u0213\44\0\1\u0214\70\0\1\u0215"+
    "\55\0\1\u0216\40\0\1\u0217\34\0\1\u0218\45\0\1\u01db"+
    "\1\u0219\27\u01db\1\0\20\u01db\26\0\1\u019b\44\0\1\u021a"+
    "\37\0\1\u021b\42\0\31\u021c\1\0\20\u021c\2\0\1\u021d"+
    "\52\0\1\u021e\57\0\1\u021f\61\0\1\u0220\43\0\1\u0221"+
    "\46\0\1\u0222\43\0\1\u0223\67\0\1\u0224\41\0\1\u0225"+
    "\43\0\1\u0226\55\0\1\u0227\73\0\1\u0228\23\0\1\u0229"+
    "\55\0\1\u022a\52\0\1\u016d\44\0\1\u022b\55\0\1\u022c"+
    "\60\0\1\u01ae\36\0\1\u022d\55\0\1\u022e\54\0\1\u022f"+
    "\57\0\1\u0230\32\0\1\u01fc\1\u0231\27\u01fc\1\0\20\u01fc"+
    "\7\0\1\u0232\63\0\1\u0233\57\0\1\u0234\37\0\1\u0235"+
    "\45\0\1\u0236\40\0\1\u01c3\1\u0203\3\u01c3\1\u0237\23\u01c3"+
    "\1\0\20\u01c3\10\0\1\u0238\41\0\1\u01c5\1\u0205\3\u01c5"+
    "\1\u0239\23\u01c5\1\0\20\u01c5\20\0\1\u023a\33\0\1\u023b"+
    "\47\0\1\u0208\1\u023c\27\u0208\1\0\20\u0208\24\0\1\u023d"+
    "\45\0\1\u023e\44\0\1\u023f\40\0\1\u0240\47\0\1\u0109"+
    "\1\u014c\4\u0109\1\u0241\22\u0109\1\0\20\u0109\6\0\1\u0242"+
    "\63\0\1\u0243\61\0\1\u0244\23\0\1\u0245\55\0\1\u0246"+
    "\62\0\1\u0247\50\0\1\u0248\65\0\1\u0249\27\0\1\u024a"+
    "\41\0\1\u01db\1\u0219\3\u01db\1\u024b\23\u01db\1\0\20\u01db"+
    "\3\0\1\u024c\54\0\1\u024d\43\0\1\u021c\1\u024e\27\u021c"+
    "\1\0\20\u021c\10\0\1\u024f\52\0\1\u0250\57\0\1\u0251"+
    "\34\0\1\u0252\47\0\31\u0253\1\0\20\u0253\6\0\1\u0254"+
    "\64\0\1\u0255\43\0\1\u0256\56\0\1\u0257\44\0\1\u0258"+
    "\51\0\1\u0259\51\0\1\u025a\36\0\31\u025b\1\0\20\u025b"+
    "\13\0\1\u025c\36\0\1\u01fc\1\u0231\3\u01fc\1\u025d\23\u01fc"+
    "\1\0\20\u01fc\37\0\1\u025e\15\0\1\u025f\55\0\1\u0260"+
    "\110\0\1\u0261\12\0\1\u0262\42\0\1\u01c3\1\u0203\27\u01c3"+
    "\1\0\7\u01c3\1\u0263\10\u01c3\15\0\1\u0264\34\0\1\u01c5"+
    "\1\u0205\27\u01c5\1\0\7\u01c5\1\u0265\10\u01c5\6\0\1\u0266"+
    "\72\0\1\u0267\22\0\1\u0208\1\u023c\3\u0208\1\u0268\23\u0208"+
    "\1\0\20\u0208\21\0\1\u0269\52\0\1\u026a\47\0\1\u026b"+
    "\44\0\1\u026c\57\0\1\u026d\50\0\1\u026e\44\0\1\u026f"+
    "\40\0\1\u0270\67\0\1\u0271\47\0\1\u0272\33\0\31\u0273"+
    "\1\0\20\u0273\1\u01db\1\u0219\27\u01db\1\0\7\u01db\1\u0274"+
    "\10\u01db\11\0\1\u0275\67\0\1\u0276\22\0\1\u021c\1\u024e"+
    "\3\u021c\1\u0277\23\u021c\1\0\20\u021c\13\0\1\u0278\51\0"+
    "\1\u0279\36\0\1\u0253\1\u027a\27\u0253\1\0\20\u0253\3\0"+
    "\1\u027b\57\0\1\u027c\61\0\1\u027d\41\0\1\u027e\51\0"+
    "\1\u027f\51\0\1\u0280\40\0\1\u025b\1\u0281\27\u025b\1\0"+
    "\20\u025b\2\0\1\u0282\47\0\1\u01fc\1\u0231\22\u01fc\1\u0283"+
    "\4\u01fc\1\0\20\u01fc\10\0\1\u0284\52\0\1\u0285\50\0"+
    "\1\u0286\52\0\1\u0287\77\0\1\u0288\12\0\1\u01c3\1\u0203"+
    "\11\u01c3\1\u0289\15\u01c3\1\0\20\u01c3\46\0\1\u028a\3\0"+
    "\1\u01c5\1\u0205\11\u01c5\1\u028b\15\u01c5\1\0\20\u01c5\7\0"+
    "\1\u028c\42\0\1\u0208\1\u023c\21\u0208\1\u028d\5\u0208\1\0"+
    "\20\u0208\17\0\1\u028e\54\0\1\u028f\40\0\1\u0290\43\0"+
    "\1\u0291\67\0\1\u0292\41\0\1\u0293\50\0\1\u0294\51\0"+
    "\1\u0295\61\0\1\u0296\31\0\1\u0273\1\u0297\27\u0273\1\0"+
    "\20\u0273\1\u01db\1\u0219\11\u01db\1\u0298\15\u01db\1\0\20\u01db"+
    "\6\0\1\u0299\52\0\1\u029a\42\0\1\u021c\1\u024e\6\u021c"+
    "\1\u029b\20\u021c\1\0\20\u021c\2\0\1\u029c\67\0\1\u029d"+
    "\31\0\1\u0253\1\u027a\3\u0253\1\u029e\23\u0253\1\0\20\u0253"+
    "\11\0\1\u029f\47\0\1\u02a0\45\0\1\u02a1\55\0\1\u02a2"+
    "\51\0\1\u02a3\51\0\1\u02a4\42\0\1\u025b\1\u0281\3\u025b"+
    "\1\u02a5\23\u025b\1\0\20\u025b\6\0\1\u02a6\43\0\1\u01fc"+
    "\1\u0231\1\u01fc\1\u02a7\25\u01fc\1\0\20\u01fc\23\0\1\u02a8"+
    "\41\0\1\u02a9\75\0\1\u02aa\27\0\1\u02ab\44\0\1\u02ac"+
    "\41\0\1\u01c3\1\u0203\1\u02ad\26\u01c3\1\0\20\u01c3\11\0"+
    "\1\u02ae\40\0\1\u01c5\1\u0205\1\u02af\26\u01c5\1\0\20\u01c5"+
    "\10\0\1\u02b0\41\0\1\u0208\1\u023c\16\u0208\1\u02b1\10\u0208"+
    "\1\0\20\u0208\13\0\1\u02b2\44\0\1\u02b3\52\0\1\u02b4"+
    "\53\0\1\u02b5\43\0\1\u02b6\55\0\1\u02b7\50\0\1\u02b8"+
    "\53\0\1\u02b9\41\0\1\u0273\1\u0297\3\u0273\1\u02ba\23\u0273"+
    "\1\0\20\u0273\1\u01db\1\u0219\1\u02bb\26\u01db\1\0\20\u01db"+
    "\12\0\1\u02bc\37\0\1\u021c\1\u024e\7\u021c\1\u02bd\17\u021c"+
    "\1\0\20\u021c\21\0\1\u02be\30\0\1\u0253\1\u027a\1\u02bf"+
    "\26\u0253\1\0\20\u0253\16\0\1\u02c0\44\0\1\u01ae\56\0"+
    "\1\u02c1\51\0\1\u02c2\51\0\1\u02c3\33\0\1\u025b\1\u0281"+
    "\1\u02c4\26\u025b\1\0\20\u025b\1\u01fc\1\u0231\10\u01fc\1\u02c5"+
    "\16\u01fc\1\0\20\u01fc\3\0\1\u02c6\50\0\1\u02c7\62\0"+
    "\1\u02c8\105\0\1\u02c9\25\0\1\u02ca\26\0\1\u01c3\1\u0203"+
    "\14\u01c3\1\u02cb\12\u01c3\1\0\20\u01c3\15\0\1\u02cc\34\0"+
    "\1\u01c5\1\u0205\14\u01c5\1\u02cd\12\u01c5\1\0\20\u01c5\37\0"+
    "\1\u02ce\12\0\1\u0208\1\u023c\10\u0208\1\u02cf\16\u0208\1\0"+
    "\20\u0208\20\0\1\u02d0\47\0\1\u02d1\44\0\1\u02d2\56\0"+
    "\1\u02d3\41\0\1\u02d4\43\0\1\u0273\1\u0297\13\u0273\1\u02d5"+
    "\13\u0273\1\0\20\u0273\1\u01db\1\u0219\14\u01db\1\u02d6\12\u01db"+
    "\1\0\20\u01db\21\0\1\u02d7\30\0\1\u021c\1\u024e\16\u021c"+
    "\1\u02d8\10\u021c\1\0\20\u021c\3\0\1\u02d9\46\0\1\u0253"+
    "\1\u027a\11\u0253\1\u02da\15\u0253\1\0\20\u0253\13\0\1\u02db"+
    "\51\0\1\u02dc\51\0\1\u02dd\51\0\1\u02de\36\0\1\u025b"+
    "\1\u0281\1\u025b\1\u02df\25\u025b\1\0\20\u025b\1\u01fc\1\u0231"+
    "\2\u01fc\1\u02e0\24\u01fc\1\0\20\u01fc\16\0\1\u02e1\41\0"+
    "\1\u02e2\54\0\1\u02e3\63\0\1\u02e4\31\0\1\u02e5\46\0"+
    "\1\u01c3\1\u0203\6\u01c3\1\u02e6\20\u01c3\1\0\20\u01c3\47\0"+
    "\1\u02e7\2\0\1\u01c5\1\u0205\6\u01c5\1\u02e8\20\u01c5\1\0"+
    "\20\u01c5\13\0\1\u02e9\36\0\1\u0208\1\u023c\17\u0208\1\u02ea"+
    "\7\u0208\1\0\20\u0208\21\0\1\u02eb\43\0\1\u02ec\44\0"+
    "\1\u02ed\56\0\1\u02ee\36\0\1\u0273\1\u0297\11\u0273\1\u02ef"+
    "\15\u0273\1\0\20\u0273\1\u01db\1\u0219\6\u01db\1\u02f0\20\u01db"+
    "\1\0\20\u01db\17\0\1\u02f1\32\0\1\u021c\1\u024e\10\u021c"+
    "\1\u02f2\16\u021c\1\0\20\u021c\11\0\1\u02f3\40\0\1\u0253"+
    "\1\u027a\7\u0253\1\u02f4\17\u0253\1\0\20\u0253\7\0\1\u02f5"+
    "\51\0\1\u02f6\51\0\1\u02f7\51\0\1\u02f8\42\0\1\u025b"+
    "\1\u0281\15\u025b\1\u02f9\11\u025b\1\0\20\u025b\1\u01fc\1\u0231"+
    "\11\u01fc\1\u02fa\15\u01fc\1\0\20\u01fc\12\0\1\u02fb\46\0"+
    "\1\u02fc\52\0\1\u02fd\57\0\1\u02fe\33\0\1\u01c3\1\u0203"+
    "\4\u01c3\1\u02ff\22\u01c3\1\0\20\u01c3\23\0\1\u0300\26\0"+
    "\1\u01c5\1\u0205\4\u01c5\1\u0301\22\u01c5\1\0\20\u01c5\11\0"+
    "\1\u0302\40\0\1\u0208\1\u023c\7\u0208\1\u0303\17\u0208\1\0"+
    "\20\u0208\3\0\1\u0304\55\0\1\u0305\51\0\1\u0306\42\0"+
    "\1\u0273\1\u0297\16\u0273\1\u0307\10\u0273\1\0\20\u0273\1\u01db"+
    "\1\u0219\4\u01db\1\u0308\22\u01db\1\0\20\u01db\3\0\1\u0309"+
    "\46\0\1\u021c\1\u024e\24\u021c\1\u030a\2\u021c\1\0\20\u021c"+
    "\1\u0253\1\u027a\5\u0253\1\u030b\21\u0253\1\0\20\u0253\10\0"+
    "\1\u030c\51\0\1\u030d\51\0\1\u030e\51\0\1\u030f\41\0"+
    "\1\u025b\1\u0281\11\u025b\1\u0310\15\u025b\1\0\20\u025b\1\u01fc"+
    "\1\u0231\16\u01fc\1\u0311\10\u01fc\1\0\20\u01fc\17\0\1\u0312"+
    "\42\0\1\u0313\53\0\1\u0314\51\0\1\u0315\47\0\1\u0316"+
    "\50\0\1\u0317\42\0\1\u0208\1\u023c\5\u0208\1\u0318\21\u0208"+
    "\1\0\20\u0208\11\0\1\u02c7\50\0\1\u0319\51\0\1\u031a"+
    "\41\0\1\u0273\1\u0297\6\u0273\1\u031b\20\u0273\1\0\20\u0273"+
    "\4\0\1\u031c\45\0\1\u021c\1\u024e\4\u021c\1\u031d\22\u021c"+
    "\1\0\20\u021c\1\u0253\1\u027a\14\u0253\1\u031e\12\u0253\1\0"+
    "\20\u0253\42\0\1\u031f\51\0\1\u0320\51\0\1\u0321\51\0"+
    "\1\u0322\7\0\1\u025b\1\u0281\16\u025b\1\u0323\10\u025b\1\0"+
    "\20\u025b\1\u01fc\1\u0231\4\u01fc\1\u0324\22\u01fc\1\0\20\u01fc"+
    "\10\0\1\u0325\100\0\1\u0326\31\0\1\u0327\44\0\1\u0328"+
    "\47\0\1\u0329\41\0\1\u0208\1\u023c\4\u0208\1\u032a\22\u0208"+
    "\1\0\20\u0208\42\0\1\u032b\51\0\1\u032c\7\0\1\u0273"+
    "\1\u0297\27\u0273\1\0\1\u0273\1\u032d\16\u0273\14\0\1\u032e"+
    "\35\0\1\u0253\1\u027a\11\u0253\1\u032f\15\u0253\1\0\20\u0253"+
    "\43\0\1\u0330\51\0\1\u0331\51\0\1\u0332\51\0\1\u0333"+
    "\6\0\1\u025b\1\u0281\17\u025b\1\u0334\7\u025b\1\0\20\u025b"+
    "\33\0\1\u0335\21\0\1\u0336\56\0\1\u0337\100\0\1\u0338"+
    "\20\0\1\u0339\106\0\1\u033a\51\0\1\u033b\6\0\1\u0273"+
    "\1\u0297\17\u0273\1\u033c\7\u0273\1\0\20\u0273\17\0\1\u033d"+
    "\32\0\1\u0253\1\u027a\5\u0253\1\u033e\21\u0253\1\0\20\u0253"+
    "\1\u025b\1\u0281\1\u025b\1\u033f\25\u025b\1\0\20\u025b\26\0"+
    "\1\u0340\25\0\1\u0341\102\0\1\u0342\21\0\1\u0343\46\0"+
    "\31\u0344\1\0\20\u0344\1\u0273\1\u0297\2\u0273\1\u0345\24\u0273"+
    "\1\0\20\u0273\3\0\1\u0346\46\0\1\u0253\1\u027a\6\u0253"+
    "\1\u0347\20\u0253\1\0\20\u0253\1\u025b\1\u0281\7\u025b\1\u0348"+
    "\17\u025b\1\0\20\u025b\30\0\1\u0349\31\0\1\u034a\67\0"+
    "\1\u034b\25\0\1\u034c\47\0\31\u0344\1\0\11\u0344\1\u034d"+
    "\6\u0344\1\u0273\1\u0297\6\u0273\1\u034e\20\u0273\1\0\20\u0273"+
    "\4\0\1\u034f\45\0\1\u0253\1\u027a\4\u0253\1\u0350\22\u0253"+
    "\1\0\20\u0253\1\u025b\1\u0281\4\u025b\1\u0351\22\u025b\1\0"+
    "\20\u025b\10\0\1\u0352\71\0\1\u0353\31\0\1\u0354\41\0"+
    "\6\u0344\1\u0355\22\u0344\1\0\11\u0344\1\u034d\6\u0344\1\u0273"+
    "\1\u0297\4\u0273\1\u0356\22\u0273\1\0\20\u0273\30\0\1\u0357"+
    "\31\0\1\u0358\47\0\1\u0359\43\0\31\u035a\1\0\20\u035a"+
    "\10\0\1\u035b\47\0\1\u035c\43\0\1\u035a\1\u035d\27\u035a"+
    "\1\0\20\u035a\20\0\1\u035e\31\0\1\u035a\1\u035d\3\u035a"+
    "\1\u035f\23\u035a\1\0\20\u035a\10\0\1\u0360\41\0\1\u035a"+
    "\1\u035d\21\u035a\1\u0361\5\u035a\1\0\20\u035a\11\0\1\u0362"+
    "\40\0\1\u035a\1\u035d\16\u035a\1\u0363\10\u035a\1\0\20\u035a"+
    "\17\0\1\u0364\32\0\1\u035a\1\u035d\10\u035a\1\u0365\16\u035a"+
    "\1\0\20\u035a\10\0\1\u0366\41\0\1\u035a\1\u035d\17\u035a"+
    "\1\u0367\7\u035a\1\0\20\u035a\23\0\1\u0368\26\0\1\u035a"+
    "\1\u035d\7\u035a\1\u0369\17\u035a\1\0\20\u035a\1\0\1\u036a"+
    "\50\0\1\u035a\1\u035d\5\u035a\1\u036b\21\u035a\1\0\20\u035a"+
    "\5\0\1\u036c\44\0\1\u035a\1\u035d\4\u035a\1\u036d\22\u035a"+
    "\1\0\20\u035a\17\0\1\u036e\45\0\1\u036f\56\0\1\u0370"+
    "\44\0\1\u0371\40\0\1\u0372\52\0\1\u0373\55\0\1\u0374"+
    "\50\0\1\u0375\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\42\0\1\11\4\1\1\11\37\1\20\0\1\11\4\0"+
    "\1\11\4\0\1\11\4\0\1\11\34\0\1\11\124\0"+
    "\1\11\76\0\1\1\75\0\1\1\11\0\1\11\12\0"+
    "\1\1\37\0\1\11\22\0\1\1\7\0\1\1\60\0"+
    "\1\1\1\11\1\0\1\11\6\0\1\1\10\0\1\1"+
    "\1\11\3\0\1\11\3\0\1\11\3\0\1\11\7\0"+
    "\1\1\15\0\1\11\4\0\1\11\14\0\1\1\5\0"+
    "\1\1\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\22\0\1\1\1\11\3\0\1\11\10\0\1\1"+
    "\2\0\1\1\1\0\1\11\21\0\1\11\3\0\1\1"+
    "\52\0\1\1\3\0\1\11\2\0\1\1\2\0\1\1"+
    "\6\0\1\11\14\0\1\11\1\0\1\1\2\0\1\11"+
    "\33\0\1\11\15\0\1\11\12\0\1\11\5\0\1\1"+
    "\13\0\1\1\1\0\1\1\6\0\1\1\12\0\1\1"+
    "\11\0\1\1\6\0\1\1\5\0\1\1\5\0\4\11"+
    "\5\0\1\11\1\0\1\11\16\0\1\1\5\0\3\1"+
    "\3\0\1\1\2\0\1\11\2\0\1\11\20\0\1\1"+
    "\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[885];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private JSONObject akif ;
    private JSONObject jObject ;
    private JSONObject jObject2 ;
    private JSONArray jArray ;
    private StringBuilder tmp ;   
    private String language ;
    private String source ;
    private String potentialLangs ;
    private JSONObject expression ;
    private JSONObject manifestation ;
    private JSONObject item ;
    private JSONArray contributors ;
    private LOMlreLRT lrt = new LOMlreLRT() ;

    public String toString() 
    {
      return akif.toJSONString() ;
    }
    
	public JSONObject getAkif() {
		return akif;
	}

        @SuppressWarnings("unchecked")
	public void setPotentialLangs(String langs)
	{
		potentialLangs = langs;
	}

	@SuppressWarnings("unchecked")
	public void setSet(String set) {
		akif.put("set", set) ;
	}
	
	@SuppressWarnings("unchecked")
	public void setId(int id)
	{
		akif.put("identifier", new Integer( id ) ) ;
	}
	
	@SuppressWarnings("unchecked")
	public void init()
	{
		akif = new JSONObject() ;
		akif.put( "status", "published" ) ;
		akif.put( "generateThumbnail", new Boolean( true ) ) ;
		akif.put( "creationDate", utcNow() ) ;
		akif.put( "lastUpdateDate", utcNow() ) ;
		akif.put( "languageBlocks", new JSONObject() ) ;
		akif.put( "tokenBlock", new JSONObject() ) ;
		akif.put( "expressions", new JSONArray() ) ;
		akif.put( "rights", new JSONObject() ) ;
		akif.put( "contributors", new JSONArray() ) ;
		akif.put( "learningObjectives", new JSONObject() ) ;
	}
	
	private String utcNow() 
	{
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" );
		return sdf.format(cal.getTime());
	}
	
	private String extract( String element )
	{	
		return element.substring(element.indexOf(">") + 1 , element.indexOf("</") );
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LOM2AKIF(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LOM2AKIF(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { yybegin( RDESCRIPTION ) ;
		language = null ;
          }
        case 75: break;
        case 3: 
          { try
		{
			language = Toolbox.getInstance().toISO6391( tmp.toString().trim() ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( TITLESTRING ) ;
          }
        case 76: break;
        case 2: 
          { tmp.append( yytext() ) ;
          }
        case 77: break;
        case 5: 
          { try
		{
			language = Toolbox.getInstance().toISO6391( tmp.toString().trim() ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( COVERAGESTRING ) ;
          }
        case 78: break;
        case 69: 
          { if ( jObject.containsKey( "learningResourceTypes" ) )
		{
			jArray = (JSONArray)jObject.get( "learningResourceTypes" ) ;
		}
		else
		{
			jArray = new JSONArray() ;
		}
		yybegin( LEARNINGRESOURCETYPE ) ;
          }
        case 79: break;
        case 40: 
          { jObject.put( "contexts", jArray ) ;
		yybegin( EDUCATIONAL ) ;
          }
        case 80: break;
        case 43: 
          { akif.put( "learningObjectives", jObject ) ;
		yybegin( LOM ) ;
          }
        case 81: break;
        case 9: 
          { jObject.put( "name", yytext().substring(3) ) ;
          }
        case 82: break;
        case 49: 
          { akif.put( "contributors", jArray ) ;
		yybegin( LOM ) ;
          }
        case 83: break;
        case 37: 
          { yybegin( LIFECYCLE ) ;
		jArray = (JSONArray)akif.get( "contributors" ) ;
          }
        case 84: break;
        case 58: 
          { manifestation.put( "parameter", extract( yytext() ).trim() ) ;
          }
        case 85: break;
        case 42: 
          { jObject = new JSONObject() ;
		yybegin( CONTRIBUTE ) ;
          }
        case 86: break;
        case 47: 
          { jObject.put( "taxonPaths", jObject2 ) ;
		yybegin( CLASSIFICATION ) ;
          }
        case 87: break;
        case 29: 
          { language = null ;
		yybegin( COVERAGE ) ;
          }
        case 88: break;
        case 52: 
          { yybegin( RIGHTS ) ;
          }
        case 89: break;
        case 24: 
          { // if lang string is missing, use the result of lang detection
		tmp = new StringBuilder() ;                            
		yybegin( KEYWORDSTRING ) ;
          }
        case 90: break;
        case 72: 
          { jArray.addAll( lrt.getLearningResourceTypes() ) ;
		jObject.put( "learningResourceTypes", jArray ) ;
		yybegin( EDUCATIONAL ) ;
          }
        case 91: break;
        case 25: 
          { if ( jObject.containsKey( "contexts" ) )
		{
			jArray = (JSONArray)jObject.get( "contexts" ) ;
		}
		else
		{
			jArray = new JSONArray() ;
		}
		yybegin( CONTEXT ) ;
          }
        case 92: break;
        case 27: 
          { // if language is missing, use English as default
		language = "en" ;               
		yybegin( RDESCRIPTIONSTRING ) ;
          }
        case 93: break;
        case 22: 
          { // if lang string is missing, use the result of lang detection
		tmp = new StringBuilder() ;                            
		yybegin( DESCRIPTIONSTRING ) ;
          }
        case 94: break;
        case 30: 
          { if (language == null){
                    try
                    {
                            language = Toolbox.getInstance().detectLanguage( tmp.toString().trim() ) ;
                    }
                    catch( ToolboxException te )
                    {
                            System.err.println( te.getMessage() ) ;
                    }
                }
        
		if ( ((JSONObject)akif.get( "languageBlocks" )).containsKey( language ) )
		{
			((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).put("title", tmp.toString()) ;
		}
		else
		{
			jObject = new JSONObject() ;
			jObject.put( "title", tmp.toString() ) ;
			((JSONObject)akif.get( "languageBlocks" )).put( language, jObject ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( TITLE ) ;
          }
        case 95: break;
        case 74: 
          { if ( jObject.containsKey( "Agricom competences" ) )
		{
			jArray = (JSONArray)jObject.get( "Agricom competences" ) ;
		}
		else
		{
			jArray = new JSONArray() ;
		}
		yybegin( LEARNINGOBJECTIVE ) ;
          }
        case 96: break;
        case 44: 
          { yybegin( EDUCATIONAL ) ;
		jObject = (JSONObject)akif.get( "tokenBlock" ) ;
          }
        case 97: break;
        case 61: 
          { yybegin( DESCRIPTIONLANGUAGE ) ;
          }
        case 98: break;
        case 39: 
          { yybegin( LOM ) ;
          }
        case 99: break;
        case 55: 
          { jObject.put( "role", extract( yytext() ).trim() ) ;
          }
        case 100: break;
        case 13: 
          { if ( jObject2.containsKey( source ) )
		{
			jArray = (JSONArray)jObject2.get( source ) ;
		}
		else
		{
			jArray = new JSONArray() ;
		}
		yybegin( TAXON ) ;
          }
        case 101: break;
        case 54: 
          { try 
		{
			lrt.submitLOMResourceType( extract( yytext() ).trim() ) ;
		}
		catch (ToolboxException e1) 
		{
			// ignore silently. 	
		}
          }
        case 102: break;
        case 34: 
          { jArray.add( extract( yytext() ).trim() ) ;
          }
        case 103: break;
        case 8: 
          { tmp = new StringBuilder() ;
		yybegin( LOM ) ;
          }
        case 104: break;
        case 6: 
          { try
		{
			language = Toolbox.getInstance().toISO6391( tmp.toString().trim() ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( KEYWORDSTRING ) ;
          }
        case 105: break;
        case 26: 
          { jObject2.put( source, jArray ) ;
		yybegin( TAXONPATH ) ;
          }
        case 106: break;
        case 16: 
          { yybegin( ENTITY ) ;
          }
        case 107: break;
        case 10: 
          { yybegin( ROLE) ;
          }
        case 108: break;
        case 12: 
          { language = null ;
		yybegin( TITLE ) ;
          }
        case 109: break;
        case 14: 
          { jObject.put( "organization", yytext().substring(5) ) ;
          }
        case 110: break;
        case 66: 
          { if ( jObject.containsKey( "endUserRoles" ) )
		{
			jArray = (JSONArray)jObject.get( "endUserRoles" ) ;
		}
		else
		{
			jArray = new JSONArray() ;
		}
		yybegin( ENDUSERROLE ) ;
          }
        case 111: break;
        case 4: 
          { try
		{
			language = Toolbox.getInstance().toISO6391( tmp.toString().trim() ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTIONSTRING ) ;
          }
        case 112: break;
        case 63: 
          { yybegin( KEYWORDLANGUAGE ) ;
          }
        case 113: break;
        case 60: 
          { tmp = new StringBuilder() ;
		yybegin( TITLELANGUAGE ) ;
          }
        case 114: break;
        case 45: 
          { language = null ;
		yybegin( DESCRIPTION ) ;
          }
        case 115: break;
        case 23: 
          { // if language is missing, use English as default
		language = "en" ;
		yybegin( COVERAGESTRING ) ;
          }
        case 116: break;
        case 21: 
          { yybegin( GENERAL ) ;
          }
        case 117: break;
        case 46: 
          { if ( expression == null )
		{
			// set a default expression (here English)
			expression = new JSONObject() ;
			expression.put( "language", "en" ) ;
		}
		if ( expression.containsKey( "manifestations" ) )
		{
			((JSONArray)expression.get( "manifestations" )).add( manifestation ) ;
		}
		else
		{
			jArray = new JSONArray() ;
			jArray.add( manifestation ) ;
			expression.put( "manifestations", jArray ) ;
			jArray = new JSONArray() ;
			jArray.add( expression ) ;
			akif.put( "expressions", jArray ) ;
		}
		yybegin( LOM ) ;
          }
        case 118: break;
        case 71: 
          { jObject.put( "endUserRoles", jArray ) ;
		yybegin( EDUCATIONAL ) ;
          }
        case 119: break;
        case 50: 
          { jArray.add( jObject ) ;
		yybegin( LIFECYCLE ) ;
          }
        case 120: break;
        case 11: 
          { yybegin( YYINITIAL ) ;
          }
        case 121: break;
        case 73: 
          { source = extract( yytext() ).trim() ; 
		if ( jObject.containsKey( "taxonPaths" ) )
		{
			jObject2 = (JSONObject)jObject.get( "taxonPaths" ) ;
		}
		else
		{
			jObject2 = new JSONObject() ;
		}
          }
        case 122: break;
        case 15: 
          { yybegin( RIGHTS ) ;
		jObject = (JSONObject)akif.get( "rights" ) ;
          }
        case 123: break;
        case 67: 
          { language = extract( yytext().trim() ) ;
		try
		{
			language = Toolbox.getInstance().toISO6391( language ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		expression = new JSONObject() ;
		expression.put( "language", language ) ;
          }
        case 124: break;
        case 35: 
          { akif.put( "rights", jObject ) ;
		yybegin( LOM ) ;
          }
        case 125: break;
        case 41: 
          { yybegin( TAXONPATH ) ;
		// set a default value for the taxon path source
		source = "thesaurus" ;
          }
        case 126: break;
        case 53: 
          { yybegin( CLASSIFICATION ) ;
		jObject = (JSONObject)akif.get( "tokenBlock" ) ;
          }
        case 127: break;
        case 20: 
          { language = null ;
		yybegin( KEYWORD ) ;
          }
        case 128: break;
        case 36: 
          { if ( tmp.toString().trim().startsWith( "http://" ) )
		{
			jObject.put( "url", tmp.toString().trim() ) ;
		}
		else
		{
			if ( jObject.containsKey( "description" ) )
			{
				((JSONObject)jObject.get( "description" )).put( language, tmp.toString().trim() ) ;
			}
			else
			{
				jObject2 = new JSONObject() ;
				jObject2.put( language, tmp.toString().trim() ) ; 
				jObject.put( "description", jObject2 ) ;
			}
		}
		tmp = new StringBuilder() ;
		yybegin( RDESCRIPTION ) ;
          }
        case 129: break;
        case 65: 
          { yybegin( RDESCRIPTIONLANGUAGE ) ;
          }
        case 130: break;
        case 56: 
          { yybegin( TYPICALAGERANGE ) ;
          }
        case 131: break;
        case 18: 
          { yybegin( CONTRIBUTE ) ;
          }
        case 132: break;
        case 28: 
          { yybegin( RELATION ) ;
		jObject = (JSONObject)akif.get( "learningObjectives" ) ;
          }
        case 133: break;
        case 19: 
          { jObject = new JSONObject() ;
		jArray = new JSONArray() ;
		yybegin( GENERAL ) ;
          }
        case 134: break;
        case 31: 
          { if (language == null){
                    try
                    {
                            language = Toolbox.getInstance().detectLanguage( tmp.toString().trim() ) ;
                    }
                    catch( ToolboxException te )
                    {
                            System.err.println( te.getMessage() ) ;
                    }
                }

                
		if ( ((JSONObject)akif.get( "languageBlocks" )).containsKey( language ) )
		{
			((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).put("description", tmp.toString()) ;
		}
		else
		{                                         
			jObject = new JSONObject() ;
			jObject.put( "description", tmp.toString() ) ;
			((JSONObject)akif.get( "languageBlocks" )).put( language, jObject ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( DESCRIPTION ) ;
          }
        case 135: break;
        case 70: 
          { jObject.put( "date", extract( yytext() ).trim() ) ;
          }
        case 136: break;
        case 59: 
          { jObject.put( "ageRange", extract( yytext() ).trim() ) ;
          }
        case 137: break;
        case 64: 
          { yybegin( EDUCATIONAL ) ;
          }
        case 138: break;
        case 57: 
          { jArray.add( extract( yytext() ).trim() ) ;
		jObject.put( "Agricom competences", jArray ) ;
		yybegin( RELATION ) ;
          }
        case 139: break;
        case 51: 
          { akif.put( "tokenBlock", jObject ) ;
		yybegin( LOM ) ;
          }
        case 140: break;
        case 38: 
          { manifestation = new JSONObject() ;
		// temporary solution everything is an experience
		manifestation.put( "name", "experience" ) ; 
		yybegin( TECHNICAL ) ;
          }
        case 141: break;
        case 7: 
          { try
		{
			language = Toolbox.getInstance().toISO6391( tmp.toString().trim() ) ;
		}
		catch( ToolboxException te )
		{
			System.err.println( te.getMessage() ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( RDESCRIPTIONSTRING ) ;
          }
        case 142: break;
        case 62: 
          { yybegin( COVERAGELANGUAGE ) ;
          }
        case 143: break;
        case 32: 
          { if ( ((JSONObject)akif.get( "languageBlocks" )).containsKey( language ) )
		{
			((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).put("coverage", tmp.toString()) ;
		}
		else
		{
			jObject = new JSONObject() ;
			jObject.put( "coverage", tmp.toString() ) ; 
			((JSONObject)akif.get( "languageBlocks" )).put( language, jObject ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( COVERAGE ) ;
          }
        case 144: break;
        case 33: 
          { if (language == null){
                    try
                    {
                            language = Toolbox.getInstance().detectLanguage( tmp.toString().trim(), "en, fr, el" ) ;
                    }
                    catch( ToolboxException te )
                    {
                            System.out.println( te.getMessage() ) ;
                    }
                }

		if ( ((JSONObject)akif.get( "languageBlocks" )).containsKey( language ) )
		{
			if (((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).containsKey( "keywords" ) )
			{
				((JSONArray)((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).get( "keywords" )).add( tmp.toString().trim() ) ;
			}
			else
			{
				jArray = new JSONArray() ;
				jArray.add( tmp.toString().trim() ) ;
				((JSONObject)((JSONObject)akif.get( "languageBlocks" )).get( language )).put("keywords", jArray ) ;
			}
		}
		else
		{
			jArray = new JSONArray() ;
			jArray.add( tmp.toString().trim() ) ;
			jObject = new JSONObject() ;
			jObject.put("keywords", jArray ) ;
			((JSONObject)akif.get( "languageBlocks" )).put( language, jObject ) ;
		}
		tmp = new StringBuilder() ;
		yybegin( KEYWORD ) ;
          }
        case 145: break;
        case 68: 
          { item = new JSONObject() ;
		item.put( "broken", new Boolean( false ) ) ;
		item.put( "url", extract(  yytext() ).trim().replaceAll("&amp;", "&" ) ) ;
		if ( manifestation.containsKey( "items" ) )
		{
			((JSONArray)manifestation.get( "items" )).add( item ) ;
		}
		else
		{
			jArray = new JSONArray() ;
			jArray.add( item ) ;
			manifestation.put( "items", jArray ) ;
		}
          }
        case 146: break;
        case 1: 
          { //throw new Error("Illegal character <"+ yytext()+">") ;
          }
        case 147: break;
        case 17: 
          { 
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LOM2AKIF <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        LOM2AKIF scanner = null;
        try {
          scanner = new LOM2AKIF( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
